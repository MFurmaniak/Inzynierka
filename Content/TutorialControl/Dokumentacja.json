[
{
  "Name": "Poruszanie Się",
  "Tytul": "Poruszanie Się",
  "Wstep": "Postacie sterowane sztuczną inteligencją potrafią wykonywać wiele czynności. Niezależnie od ich zachowań najpierw trzeba ustawić z czego określony pionek ma korzystać. W tym zadaniu dowiesz się jak ustawić kontroler sztucznej inteligencji dla obiektu oraz jak uruchomić drzewo decyzyjne. ",
  "Mapa": [
    {
      "Name" : "CharacterPoruszanie ",
      "Value" : "Obiekt który będziemy chcieli przemieścić"
    },
    {
      "Name" : "CustomTarget ",
      "Value" : "Wyznaczony punkt końcowy na mapie"
    }
  ],
  "Cel": [
    "Postać ma przejść z pozycji startowej do wyznaczonego punktu na mapie używając tylko kontrolera sztucznej inteligencji (AiController)",
	"Postać ma przejść z pozycji startowej do wyznaczonego punktu na mapie używając drzewa zachowań (BehaviorTree i BlackBoard)"
    ],
  "Dostepne_zadania": [
     {
      "Name" : "",
      "Value" : ""
    }
  ],
  "Podpowiedzi": [
	"Ustawienie klucza typu Object o klasie bazowej typu Actor pozwala na użycie zadania move to do tego obiektu.",
	"Aby postać mogła się poruszać, konieczne jest umieszczanie siatki nawigacji na mapie.",
    "Naciśnięcie klawisza podczas edycji poziomu pozwala wyświetlić siatkę nawigacji."
  ],
  "Odnosniki":[{
    "Name":"Behavior Tree Node Reference: Tasks",
    "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceTasks/index.html"},
    {
      "Name":"GetActorOfClass",
      "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/Utilities/GetActorOfClass/index.html"
    },
    {
      "Name":"GetActorLocation",
      "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/Utilities/Transformation/GetActorLocation/index.html"
    },
    {
      "Name":"SetValueAsObject",
      "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/AI/Components/Blackboard/SetValueasObject/index.html"
    }
  ]
},
{
  "Name": "Licznik",
  "Tytul": "Licznik",
  "Wstep": "Komponent Behaviour Tree (BT) pozwala w prosty sposób zdefiniować zachowanie obiektu w reakcji na wydarzenia w grze. Poznanie BT, w jaki sposób działa i jakie daje możliwości jest kluczowe do dalszej pracy nad AI. ",
  "Mapa": [
    {
      "Name" : "Wyswietlacz",
      "Value" : "Na środku mapy stoi telebim na którym będzie wyświetlany stan naszego licznika."
    },
    {
      "Name" : "Guzik",
      "Value" : "Zielone pole na mapie reprezentuje klasyczny guzik (dwa stany on/off), po wejściu postaci na pole guzik zostaje wciśnięty (on), gdy postać zejdzie z pola stan guzika się zmieni (off)."
    },
    {
      "Name" : "Postac",
      "Value" : "Manekin którym poruszamy za pomocą myszy w celu zmiany stanu guzika."
    }
  ],
  "Cel": [
    "Należy skonstruować drzewo decyzyjne wykorzystując dostępne zadania w taki sposób, aby na wyświetlaczu były drukowane liczby/litery w zależności od stanu (on/off) guzika."
    ],
  "Dostepne_zadania": [
     {
      "Name" : "BTT_resetValue",
      "Value" : "Resetuje stan licznika do stanu początkowego"
    },
    {
      "Name" : "BTT_PrintNumberAndIncrement",
      "Value" : "Pobiera aktualny stan licznika, drukuje wartość na wyświetlaczu i zwiększa wartość o 1"
    },
    {
      "Name" : "BTT_PrintLetterAndIncrement",
      "Value" : "Analogicznie jak powyższy tylko działa na literach."
    }
  ],
  "Podpowiedzi": [
    "Ustawienie Observer aborts na self we flow control dekoratora pozwala na natychmiastowe porzucenie gałęzi w momencie gdy warunek dekoratora nie jest spełniony"
  ],
  "Odnosniki":[{
    "Name":"Behavior Tree Node Reference: Decorators",
    "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceDecorators/index.html"},
    {
      "Name":"Behavior Tree Node Reference: Composites",
      "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceComposites/index.html"}
  ]
},
{
  "Name": "Blokada drogi",
  "Tytul": "Blokada drogi",
  "Wstep": "Czasami najkrótsza droga z punktu A do punktu B nie jest drogą którą powinniśmy wybierać. Często w grach postacie muszą rozróżniać czy jakiś obiekt jest wrogi czy przyjazny. Podczas rozwiązywania tego poziomu spróbujemy wybrać trudniejszą drogę, ponad przepaścią, w celu ominięcia strażnika. Dzięki temu dowiemy się jak sprawić aby postać była traktowana jako przeszkoda oraz jak zrobić miejsca które postać sama będzie używać do określonych zadań.",
  "Mapa": [
    {
      "Name" : "Opis",
      "Value" : "Mapa została podzielona na dwie części, szarą w której nasza postać rozpoczyna swoją trasę oraz zielone pomieszczenie. Do zielonego pomieszczenia prowadzą dwie ścieżki, na jednej z nich stoi strażnik, natomiast na drugiej ścieżce jest przepaść."
    },
    {
      "Name" : "Character_Blocker",
      "Value" : "Strażnik"
    },
    {
      "Name" : "Character_Blokada_Drogi",
      "Value" : "Obiekt który będziemy chcieli przemieścić"
    },
    {
      "Name" : "Target_Blokada_Drogi ",
      "Value" : "Wyznaczony cel na mapie do którego postać musi dojść"
    }
  ],
  "Cel": [
    "Ustawienie NavLinkProxy_Blokada_Drogi w odpowiednim miejscu na mapie oraz skonfigurowanie smart link dla tego obiektu",
	"Zaznaczenie że Blocker to przeszkoda",
	"Skonfigurowanie Eventu Receive Smart Link Reached dla NavLinkProxy_Blokada_Drogi"
    ],
  "Dostepne_zadania": [
     {
      "Name" : "",
      "Value" : ""
    }
  ],
  "Podpowiedzi": [
	"Możesz użyć funkcji CalcVelocity do wyliczenia prędkości potrzebnej do pokonania odległości z punktu startowego do końcowego w określonym czasie ustawionym w parametrze duration.",
    "Jeżeli dobrze ustawisz Blockera jako przeszkodę, siatka nawigacji pod nim powinna stać się czerwona, czasem trzeba jednak przebudować ścieżki nawigacji, aby to się stało."
  ],
  "Odnosniki":[{
    "Name":"LaunchCharacter",
    "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/Character/LaunchCharacter/index.html"},
    {
      "Name":"Teleport",
      "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/Utilities/Transformation/Teleport/index.html"},
    {
      "Name":"Casting in Blueprints",
      "Value":"https://docs.unrealengine.com/en-US/Engine/Blueprints/UserGuide/CastNodes/index.html"}
  ]
},
{
  "Name": "Czujnik światła",
  "Tytul": "Czujnik światła",
  "Wstep": "Na potrzeby tego poziomu naciągniemy rzeczywistość aby pokazać w jaki sposób można sprawić aby postać mogła patrzeć i reagować na to co widzi. Naszą postacią będzie tutaj lampa ścienna, która jak automatyczne światła będzie się zapalać gdy wykryje naszą postać. W tym etapie dowiesz się jak skonfigurować komponent AiPerception dla AiController.",
  "Mapa": [
    {
      "Name" : "Pomieszczenie",
      "Value" : "Pomieszczenie ze ścianą na środku na której znajduje się lampa"
    },
    {
      "Name" : "Postać ",
      "Value" : "Sterowana ręcznie."
    }
  ],
  "Cel": [
    "Należy tak zaprogramować Controller_LightSource, że w przypadku gdy sterowana postać będzie w zasięgu lampy, ta ma się zaświecić,a gdy postać opuści ten obszar światło powinno zgasnąć po określonym czasie. Efekt powinien przypominać światło sterowane fotokomórką na klatce schodowej."	
    ],
  "Dostepne_zadania": [
     {
      "Name" : "",
      "Value" : ""
    }
  ],
  "Podpowiedzi": [
	"Po naciśnięciu klawisza ‘ na klawiaturze podczas odpalonej rozgrywki można otworzyć debug sztucznej inteligencji. W tym trybie naciśnięcie num4 pozwala na pokazanie zasięgu widzenia postaci oraz zaznaczyć co ta postać wykryła."
  ],
  "Odnosniki":[
    {
    "Name":"AiPerception",
    "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/AIPerception/index.html"
    },
    {
      "Name":"SetTimerByEvent",
      "Value":"https://docs.unrealengine.com/en-us/BlueprintAPI/Utilities/Time/SetTimerbyEvent/index.html"
    },
    {
      "Name":"Branch",
      "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/Utilities/FlowControl/Branch/index.html"
    }
  ]
},
{
  "Name": "Labirynt",
  "Tytul": "Labirynt",
  "Wstep": "Znalezienie drogi z punktu A do punktu B nie stanowi już żadnego problemu. Co jednak w przypadku gdy na drodze pojawią się drzwi które są zamknięte, a nie da się ich ominąć? Często elementem gier jest zbieranie przedmiotów będących elementem jakiejś misji. Tak więc podczas tego poziomu będzie trzeba znaleźć klucz do drzwi przez które musi nasz obiekt się przedostać. Podczas rozwiązywania tego poziomu dowiesz się jak stworzyć prosty serwis oraz zadanie jak również jakie są różnice pomiędzy nimi.",
  "Mapa": [
    {
      "Name" : "FinishPoint",
      "Value" : "Miejsce docelowe"
    },
    {
      "Name" : "Character_Labirynt_Klucz",
      "Value" : "Postać która ma wykonać zadanie"
    },
    {
      "Name" : "Door",
      "Value" : "Drzwi które wymagają klucza"
    },
    {
      "Name" : "Key",
      "Value" : "Klucz do drzwi pojawia się po losowym czasie z przedziału 0-10 po rozpoczęciu etapu"
    },
    {
      "Name" : "KeyLocationSpawn ",
      "Value" : "Miejsce gdzie znajdziemy klucz"
    }
  ],
  "Cel": [
    "Utworzenie zadania które pozwoli na zlokalizowanie klucza na mapie.",
	"Utworzenie serwisu z dokładnie taką samą funkcjonalnością.",
	"Stworzenie drzew decyzyjnych które sprawią że postać dotrze do określonego punktu.",
	"Ustawienie dynamicznego tworzenia siatki nawigacji."
    ],
  "Dostepne_zadania": [
     {
      "Name" : "BTT_PickUpKey",
      "Value" : "Postać podniesie klucz gdy znajduje sie wystarczajaco blisko"
    },
	{
      "Name" : "BTT_OpenDoor ",
      "Value" : "Gdy posiada klucz i znajduje sie wystarczajaco blisko postać otworzy drzwi"
    }
  ],
  "Podpowiedzi": [
    "Serwis będzie podobny w budowie do zadania"
  ],
  "Odnosniki":[
    {
    "Name":"GetActorOfClass",
    "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/Utilities/GetActorOfClass/index.html"
    },
    {
      "Name":"FindingActors",
      "Value":"https://docs.unrealengine.com/en-US/Gameplay/HowTo/FindingActors/Blueprints/index.html"
    },
    {
      "Name":"Behavior Tree Node Reference: Services",
      "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceServices/index.html"
    },
    {
      "Name":"Behavior Tree Node Reference: Tasks",
      "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceTasks/index.html"
    },
    {
      "Name":"IsValid",
      "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/Utilities/IsValid/index.html"
    }
  ]
},
{
  "Name": "Wartownik V1",
  "Tytul": "Wartownik V1",
  "Wstep": "W poprzednich poziomach nauczyliśmy się już tworzyć drzewa zachowań oraz używać komponentu by sprawić żeby obiekt potrafił patrzeć. Podczas rozwiązywania tego poziomu połączymy te dwie umiejętności w jednej postaci i sprawimy aby wykonywała jedną czynność w tym przypadku patrolowanie okolicy. Gdy zobaczy jakąś postać biegającą po mapie wartownik powinien udać się do swojej kryjówki, następnie wrócić do patrolowania. Po rozwiązaniu tego poziomu nauczysz się tworzyć bardziej zaawansowane zachowanie postaci.",
  "Mapa": [
    {
      "Name" : "Opis",
      "Value" : "Na mapie znajduje się chata wartownika oraz otaczają ją kilka drzew. Po mapie poruszają się małe elfy."
    },
    {
      "Name" : "Character_Wartownik",
      "Value" : "Obiekt do oprogramowania"
    },
    {
      "Name" : "Target_Wartownik",
      "Value" : "Miejsce meldunku wartownika"
    },
    {
      "Name" : "Manekin ",
      "Value" : "Obiekt którym będziemy się poruszać"
    }
  ],
  "Cel": [
    "Stworzenie drzewa decyzyjnego dla postaci wartownika",
	"Utworzenie prostej reakcji na wykrycie przeciwnika dla kontrolera wartownika"	
    ],
  "Dostepne_zadania": [
     {
      "Name" : "BTT_ResetLineOfSight ",
      "Value" : "Należy wykonać po dojściu do wyznaczonego miejsca"
    },
	{
      "Name" : "BT_Patrol",
      "Value" : "Do wykorzystania aby wartownik patrolował teren"
    }
  ],
  "Podpowiedzi": [
	"Możesz wykorzystać drzewo BT_patrol przez umieszczenie węzła run behavior w drzewie"
  ],
  "Odnosniki":[
    {
    "Name":"AiPerception",
    "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/AIPerception/index.html"
    },
    {
      "Name":"SetTimerByEvent",
      "Value":"https://docs.unrealengine.com/en-us/BlueprintAPI/Utilities/Time/SetTimerbyEvent/index.html"
    },
    {
      "Name":"Branch",
      "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/Utilities/FlowControl/Branch/index.html"
    },
    {
      "Name":"Behavior Tree Node Reference: Decorators",
      "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceDecorators/index.html"
    }

  ]
},
{
  "Name": "Wartownik V2",
  "Tytul": "Wartownik V2",
  "Wstep": "Podczas tego poziomu rozwiniemy umiejętności wartownika z poprzedniego poziomu. NPC patrolując teren w przypadku wykrycia intruza biegnie do swojej chaty, tym razem chcemy aby zachował się inaczej, konkretnie chcemy, żeby z wartownika stał się łowcą i w przypadku zauważenia celu rozpoczął pogoń za nim, w przypadku utraty celu z pola widzenia powinien udać się do ostatniej lokalizacji w jakiej go widział. ",
  "Mapa": [
    {
      "Name" : "Opis",
      "Value" : "Mapa wygląda dokładnie tak samo jak w ostatniej wersji wartownika, jednak postać wartownika umie już to co wartownik v1."
    }
  ],
  "Cel": [
    "Zmodyfikowanie istniejącego już drzewa",
	"Zmodyfikowanie istniejącej już reakcji na zauważenie przeciwnika"
    ],
  "Dostepne_zadania": [
     {
      "Name" : "",
      "Value" : ""
    }
  ],
  "Podpowiedzi": [],
  "Odnosniki":[
    {
    "Name":"AiPerception",
    "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/AIPerception/index.html"
    },
    {
      "Name":"SetTimerByEvent",
      "Value":"https://docs.unrealengine.com/en-us/BlueprintAPI/Utilities/Time/SetTimerbyEvent/index.html"
    },
    {
      "Name":"Branch",
      "Value":"https://docs.unrealengine.com/en-US/BlueprintAPI/Utilities/FlowControl/Branch/index.html"
    },
    {
      "Name":"Behavior Tree Node Reference: Decorators",
      "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/BehaviorTrees/BehaviorTreeNodeReference/BehaviorTreeNodeReferenceDecorators/index.html"
    }
  ]
},
  {
    "Name": "ZbieranieTabletek",
    "Tytul": "Zbieranie Tabletek",
    "Wstep": "W rzeczywistym świecie jak i grze nie wszystko oceniamy w systemie 0/1. Czas więc na podjęcie próby szerszego spojrzenia na stworzony świat gry, w tym poziomie zajmiemy się analizą i wyborem korzystniejszych wariantów. W tym etapie postarmy się zaprogramować postać w taki sposób aby zbierała tabletki określonego koloru w swojej najbliższej okolicy. Dzięki temu poznasz zasadę działania Enviroment Query System.",
    "Mapa": [
      {
        "Name" : "Opis",
        "Value" : "Zamknięte pomieszczenie w którym pojawiają się pigułki które z czasem zwiększają swoją objętość. Dodatkowo po 5 minutach mapa się zatrzyma."
      },
      {
        "Name" : "CharacterPillCollector",
        "Value" : "Obiekt który zbiera pigułki"
      }
    ],
    "Cel": [
      "Zmodyfikowanie BT_PillCollector aby postać zbierała zielone pigułki",
      "Zaimplementowanie EQS_FindBestPill aby znajdować zielone tabletki w zasięgu 1250"
    ],
    "Dostepne_zadania": [
      {
        "Name" : "BTT_PickUpPill ",
        "Value" : "Zdanie do wykorzystania aby podnieść pigułkę"
      },
      {
        "Name" : "BTT_RunEqsAndSetVariable",
        "Value" : "Zadanie które wykonuje EQS_FindBestPill pobierając wszystkie tabletki w zasięgu, przemnaża ich wynik przez size/11, a następnie wybiera najlepsza i ustawia ją w BestPill w tablicy"
      }
    ],
    "Podpowiedzi": [],
    "Odnosniki":[
      {
        "Name":"EQSQuickStart",
        "Value":"https://docs.unrealengine.com/en-US/Engine/ArtificialIntelligence/EQS/EQSQuickStart/index.html"
      }
    ]
  }
]